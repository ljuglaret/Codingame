import java.util.*;
import java.io.*;
import java.math.*;
import java.lang.*; 
 
/**
 * Auto-generated code below aims at helping you parse
 * the standard input according to the problem statement.
 **/
class Solution {
    public static String triA(String input){
    char[] in = input.toCharArray();
    Arrays.sort(in);
    return new String(in);
    }

    public static String triD(String input){
        char[] in = input.toCharArray();
        Arrays.sort(in);
        char[] in2 = new char[input.length()];
        for (int i = in.length-1; i >= 0 ; i--){
            in2[input.length() - i - 1] =   in[i]; 
        }
        return new String(in2);
    }

    public static String zeros(int n ){
        int i = 0 ; 
        String  s= "";
        while(i<n){
            s  = "0"+s;
            i++;
            }
            return s;
        }

    public static String calcule(String n1){
               
        long x = Long.parseLong(triD(n1));
        long y = Long.parseLong(triA(n1));
        long z = x-y;
        
        String n3 = "";
        
        n3 =String.valueOf(z);
        
        return n3;
        }  
        
        
            public static boolean present(String s , List<String> l) {
        boolean b= false;
        for(String e : l){
            if(s.equals(e)){
                b = true;
            }
        }
        return b;
    }


    public static void main(String args[]) {

        Scanner in = new Scanner(System.in);
        String n0 = in.nextLine();
           int t = n0.length();
        String nd = n0;
        String n1 = "";
        boolean cond = false;        boolean cycleInf = false;
        List<String> rep = new ArrayList<String>();
        List<String> couples = new ArrayList<String>();
    
            while(!cond) { //!(nd.equals(n1))
                n1 = calcule(n0);
                n1 = zeros(t-n1.length())+n1;
                rep.add(n0);              
                cond =  (present((n0+" "+n1),couples)|| (n1.equals(n0)));
                if(n0.equals(n1)){cycleInf  = true;}
                couples.add(n0+" "+n1); 
                n0 = n1;
              }



    
        if(cycleInf){System.out.print(rep.get(rep.size() - 1 ));}
        else{
            int debut = 0 ; 
            int fin = 0  ;
        for(int i =  0 ;  i< rep.size() - 1 ; i++){
            for(int j = i + 1 ; j < rep.size() ; j++){
                if(rep.get(i).equals(rep.get(j))){
                    debut = i;
                    fin = j;
                }
            }
        }
        for(int i = debut ; i< fin - 1; i++){
            System.out.print(rep.get(i)+" ");
            }
            System.out.print(rep.get(fin - 1));
        }
        // Write an action using System.out.println()
        // To debug: System.err.println("Debug messages...");
    }
}
