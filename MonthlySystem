import System.IO
import Control.Monad
import Data.List
import Data.String


main :: IO ()
main = do
    hSetBuffering stdout NoBuffering -- DO NOT REMOVE
    
    -- Auto-generated code below aims at helping you parse
    -- the standard input according to the problem statement.
    
    input_line <- getLine
    let n = read input_line :: Int
    
    l<-replicateM n $ do
        m <- getLine
        --putStrLn m

        return (m)
    
    -- hPutStrLn stderr "Debug messages..."
    
    putStrLn(concat(partie3 l))
    -- Write answer to stdout
    return ()
    
    
    
prendre x str = take x str    



laisser x str = drop x str


decoupe str = 
    if str == ""
    then []
    else (prendre 3 str) : (decoupe (laisser 3 str))
    

listeMois =  ["Jan" , "Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]::[String]

listeMoisCh = [0,1,2,3,4,5,6,7,8,9,10,11]::[Int]


correp1  str l1 l2 =
    case (l1,l2) of 
        (x:s1,y:s2) -> if(x == str) then y
                        else correp1 str s1 s2
        (_,_) -> 0

correp2 str l1 l2=
    case (l1,l2) of 
        (x:s1,y:s2) -> if(y == str) then x
                        else correp2 str s1 s2
        (_,_) -> ""

moisVersCh str = correp1 str listeMois listeMoisCh


remplacement str = 
    let
        str2 = decoupe str
    in
        map(\s -> moisVersCh s) str2


  
litEnbase12 s = 
    let  
        aux acc douze l0 =
            case l0 of
                x:suite -> aux (acc + (x*douze)) (douze*12) suite
                []       -> acc

    in aux 0 1 (reverse s)

partie1 str = litEnbase12(remplacement str) 

sommeGenerale :: [String] -> Int
sommeGenerale ls =   fromIntegral (sum(map (\elt -> partie1 elt) ls)) 


basef :: Int -> Int -> [Int] 
basef b nombre = 
    let 
        aux :: [Int] ->Int -> Int ->  [Int]
        aux acc base nb =
            if (nb > 0) 
            then aux (nb `mod` base: acc) base (nb `quot` base)
            else  acc 

    in aux [] b nombre

base12 :: Int -> [Int]
base12 nb = basef 12 nb


partie2 ::[ String] -> [ Int]
partie2 s =
    let 
        l = sommeGenerale s 
    in base12  l


chVersMois :: Int -> String
chVersMois str = (correp2 str listeMois listeMoisCh)

partie3:: [String] -> [String]
partie3 l = map(\elt -> chVersMois elt)(partie2 l)

